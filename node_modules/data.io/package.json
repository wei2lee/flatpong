{
  "name": "data.io",
  "version": "0.2.0",
  "description": "Bidirectional data syncing via Socket.IO",
  "homepage": "http://github.com/scttnlsn/data.io",
  "main": "lib/index",
  "author": {
    "name": "Scott Nelson",
    "email": "scott@scttnlsn.com",
    "url": "http://scttnlsn.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/scttnlsn/data.io.git"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha"
  },
  "dependencies": {
    "q": "0.9.x"
  },
  "devDependencies": {
    "express": "3.1.x",
    "mocha": "1.8.x",
    "sinon": "1.6.x",
    "socket.io": "0.9.x",
    "socket.io-client": "0.9.x"
  },
  "readme": "data.io\n===\n\nBidirectional data syncing via Socket.IO\n\nExample\n---\n\nOn the server:\n\n```javascript\nvar io = require('socket.io').listen(3000);\nvar data = require('data.io')(io);\n\nvar messages = data.resource('messages');\n\nvar store = {};\nvar id = 1;\n\nmessages.use('create', 'update', function(req, res) {\n    var message = req.data;\n    if (!message.id) message.id = id++;\n    store[message.id] = message;\n    res.send(message);\n});\n\nmessages.use('delete', function(req, res) {\n    var message = store[req.data.id];\n    delete store[message.id];\n    res.send(message);\n});\n\nmessages.use('read', function(req, res) {\n    var message = store[req.data.id];\n    res.send(message);\n});\n```\n\nOn the client:\n\n```html\n<script src=\"/socket.io/socket.io.js\"></script>\n<script src=\"/socket.io/data.io.js\"></script>\n\n<script>\n    var conn = data(io.connect());\n    var messages = conn.resource('messages');\n\n    messages.subscribe('create', 'update', function(message) {\n        // Message created or updated on the server\n    });\n\n    messages.subscribe('delete', function(message) {\n        // Message deleted on the server\n    });\n\n    // Create a new message on the server\n    messages.sync('create', { text: 'Hello World' }, function(err, message) {\n        // Message saved\n    });\n</script>\n```\n\nResources\n---\n\nResources are stacks of composable middleware functions that are responsible for handling sync requests from the client and responding appropriately.  Each middleware layer is a function that accepts a request and response object (as well as a function that can be called to continue execution down the stack).  A middleware layer will generally either modify the request context and pass control to the next layer or respond to the client with some kind of result or error.\n\nFor example, we could add logging middleware to a resource:\n\n```javascript\nvar messages = data.resource('messages');\n\nmessages.use(function(req, res, next) {\n    console.log(new Date(), req.action, req.data);\n    next();\n});\n\nmessages.use(...);\n```\n\nMiddleware can be selectively applied to particular actions by specifying them in your calls to `use`.  If a request's action does not match a particular layer then that layer will be skipped in the stack.  For example, we might want to authorize requests on create, update and delete actions:\n\n```javascript\nmessages.use('create', 'update', 'delete', function(req, res, next) {\n    // req.action is one of 'create', 'update' or 'delete'\n\n    req.client.get('access token', function(err, token) {\n        if (err) return next(err);\n\n        if (isAuthorized(token)) {\n            next();\n        } else {\n            next(new Error('Unauthorized'));\n        }\n    });\n});\n\nmessages.use(function(req, res, next) {\n    // req.action could be anything\n    // 'create', 'update' or 'delete' is authorized\n});\n```\n\nRequest\n---\n\nWhen clients initiate a sync with the server a request object is created and passed through the middleware stack.  A request object will contain the following properties:\n\n* `action` - the type of sync action being performed (i.e. create, read, update, etc.)\n* `data` - any data provided by the client\n* `options` - additional options set by the client\n* `resource` - the resource handling the sync\n* `client` - the Socket.IO client that initiated the request\n\nMiddleware functions can use the request object for storing arbitrary data via the `get(key)` and `set(key, value)` functions:\n\n```javascript\nmessages.use('create', function(req, res, next) {\n    req.set('date', new Date());\n    next();\n});\n\nmessages.use(function(req, res, next) {\n    console.log(req.get('date'));\n    next();\n});\n```\n\nResponse\n---\n\nThe response object provides mechanisms for responding to client requests.  It exposes two function `send` and `error` that can be used for returning results or errors back to the client.\n\nEvents\n---\n\nWhen a client connects to a particular resource a `connection` event is emitted on the resource.  This can be used to perform any initialization, etc.\n\n```javascript\nmessages.on('connection', function(client) {\n    console.log(new Date(), 'connected', client);\n    client.join('some room');\n});\n```\n\nIf your connection event handler needs to perform an async operation, call `this.async()` from within your callback.  The connection will not handle any requests until all async operations have completed without error.\n\n```javascript\nmessages.on('connection', function(client) {\n    var done = this.async();\n\n    client.set('access token', client.handshake.query.access_token, function() {\n        done();\n    });\n});\n```\n\nWhen a response is sucessfully sent back to the client a `sync` event is emitted on the resource and a sync object is provided.\n\n```javascript\nmessages.on('sync', function(sync) {\n    // Messages resource handled a sync\n});\n```\n\nThe sync object contains the following properties:\n\n* `client` - the client that initiated the sync\n* `resource` - the resource that handled the sync\n* `action` - the sync action performed\n* `result` - the result returned to the client\n\nAnd provides these methods:\n\n* `notify(emitter, ...)` - emit a sync event on the given emitters\n* `stop()` - stop the default notification (syncs are broadcast to all clients by default)\n\nFor example:\n\n```javascript\nmessages.on('sync', function(sync) {\n    // Prevent sync event from being broadcast to connected clients\n    sync.stop();\n\n    // Notify clients in rooms 'foo' and 'bar'\n    if (sync.action !== 'read') {\n        sync.notify(sync.client.broadcast.to('foo'), sync.client.broadcast.to('bar'));\n    }\n});\n```\n\nClient\n---\n\nThe client-side component provides a thin wrapper around Socket.IO for syncing data to the server and listening for sync events triggered by the server.\n\n```javascript\nvar conn = data(io.connect());\nvar messages = conn.resource('messages');\n```\n\nMake requests to the server with a resource's `sync` function:\n\n* `sync(action, [data], [options], callback)` - perform the specified action optionally sending the given data and request options, callback takes an error and a result\n\n```javascript\nmessages.sync('create', { text: 'Hello World' }, function(err, result) {\n\n});\n```\n\nListen to syncs from the server with a resource's `subscribe` function:\n\n* `subscribe([action], ..., callback)` - listen for syncs happening on the server optionally passing the actions to which the client should listen, callback accepts a result and action\n\n```javascript\n// Listen to all actions\nmessages.subscribe(function(data, action) {\n    console.log(action, data);\n});\n\n// Listen to specific actions\nmessages.subscribe('create', 'update', 'delete', function(data, action) {\n    // Action is one of 'create', 'update', or 'delete'\n});\n```\n\nThe client library can also be used server-side via the [socket.io-client](https://github.com/LearnBoost/socket.io-client) module:\n\n```javascript\nvar socket = require('socket.io-client').connect('http://localhost:3000');\nvar conn = require('data.io').client(socket);\nvar messages = conn.resource('messages');\n// etc.\n```\n\nInstall\n---\n\n    npm install data.io\n\nTest\n---\n\n    npm test\n\nLicense\n---\n\nCopyright (C) 2013 Scott Nelson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/scttnlsn/data.io/issues"
  },
  "_id": "data.io@0.2.0",
  "_from": "data.io@"
}
